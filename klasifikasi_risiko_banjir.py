# -*- coding: utf-8 -*-
"""Klasifikasi_Risiko_Banjir.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18eMfz8Ic5NkuRSEg0WrxiYoSeIyCXUPV

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

# Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    mean_squared_error, r2_score, classification_report, confusion_matrix
)

"""### Menyiapkan data yang akan diguankan"""

# Load Data
df = pd.read_csv("flood.csv")

"""## Data Understanding

### Analisis informasi umum (jumlah data, tipe data, nilai null, duplikat)
"""

print(df.info())

print("\nJumlah missing values per kolom:\n", df.isnull().sum())

# Mengecek dataset menggunakan duplicated().sum()
print(df.duplicated().sum())

# Distribusi FloodProbability
sns.histplot(df['FloodProbability'], bins=30, kde=True)
plt.title("Distribusi FloodProbability")
plt.xlabel("FloodProbability")
plt.ylabel("Jumlah Observasi")
plt.show()

# Korelasi Antar Fitur
plt.figure(figsize=(16, 12))
sns.heatmap(df.corr(), cmap="coolwarm", annot=False)
plt.title("Correlation Matrix of Flood Features")
plt.show()

"""### Hasil korelasi matirix menunjukan hubungan korelasi tinggi secara kolektif `FloodProbability`, Mari uji dengan regresi linier untuk melihat apakah `FloodProbability` adalah kombinasi linier dari fitur lainnya."""

# Cek Linearitas FloodProbability
X_all = df.drop("FloodProbability", axis=1)
y_all = df["FloodProbability"]

lr_check = LinearRegression()
lr_check.fit(X_all, y_all)

y_pred_all = lr_check.predict(X_all)
rmse_all = np.sqrt(mean_squared_error(y_all, y_pred_all))
r2_all = r2_score(y_all, y_pred_all)

print(f"RMSE (all data): {rmse_all:.10f}")
print(f"R¬≤ Score (all data): {r2_all:.10f}")

# üîç Visualisasi Prediksi vs Aktual
plt.figure(figsize=(6,6))
plt.scatter(y_all, y_pred_all, alpha=0.5, color='blue')
plt.plot([y_all.min(), y_all.max()], [y_all.min(), y_all.max()], 'r--')
plt.xlabel("Actual FloodProbability")
plt.ylabel("Predicted FloodProbability")
plt.title("Actual vs Predicted (Linear Regression)")
plt.grid(True)
plt.show()

"""## Data Preparation

### `FloodProbability` dapat **dibinning** menjadi kelas risiko (`FloodRiskLevel`) menggunakan teknik Quantile Binning, untuk menyeimbangkan distribusi label
"""

# Klasifikasi Risiko: Quantile Binning
df['FloodRiskLevel'] = pd.qcut(df['FloodProbability'],
                                q=3,
                                labels=['Low', 'Medium', 'High'])

# Distribusi Kategori
plt.figure(figsize=(6,4))
sns.countplot(x='FloodRiskLevel', data=df, order=['Low', 'Medium', 'High'], palette='viridis')
plt.title("Distribusi Risiko Banjir")
plt.xlabel("Tingkat Risiko")
plt.ylabel("Jumlah Wilayah")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Persiapan Fitur dan Target
X = df.drop(['FloodProbability', 'FloodRiskLevel'], axis=1)
y = df['FloodRiskLevel']

# üî§ Encode Label
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# ‚úÇÔ∏è Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

"""## Modeling"""

# Logistic Regression
lr_clf = LogisticRegression(max_iter=1000)
lr_clf.fit(X_train, y_train)
y_pred_lr = lr_clf.predict(X_test)

# üå≤ Random Forest Classifier
rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)
rf_clf.fit(X_train, y_train)
y_pred_rf = rf_clf.predict(X_test)

"""## Evaluation"""

# Evaluasi Model
def evaluate_classification(y_true, y_pred, model_name):
    print(f"üìå Evaluation: {model_name}")
    print(classification_report(y_true, y_pred, target_names=le.classes_))
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=le.classes_, yticklabels=le.classes_)
    plt.title(f"Confusion Matrix: {model_name}")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()
    print("-" * 50)

# Evaluasi model Logistic Regression
evaluate_classification(y_test, y_pred_lr, "Logistic Regression")

# Evaluasi model Random Forest Classifier
evaluate_classification(y_test, y_pred_rf, "Random Forest Classifier")







